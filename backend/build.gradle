plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.sonarqube" version "4.0.0.2929"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //webflux세팅
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    //s3 설정
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    //메타데이터 추출
    implementation 'com.drewnoakes:metadata-extractor:2.18.0'
    //multipartfile
    implementation 'org.springframework.boot:spring-boot-starter-test'
    //swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    //javaSDK, will fallback to SDK implementation which may be less performant. If you ar sing Java9+.~
    implementation 'javax.xml.bind:jaxb-api:2.3.1' // 또는 최신 버전으로 설정


}

// SonarQube 설정
sonarqube {
    properties {
        property "sonar.projectKey", System.getenv("SONAR_PROJECT_KEY") // SonarQube에서 생성한 프로젝트 키
        property "sonar.host.url",  System.getenv("SONAR_HOST_URL") // SonarQube 서버 URL
        property "sonar.login",  System.getenv("SONAR_LOGIN") // SonarQube 인증 토큰
    }
}


tasks.named('test') {
    useJUnitPlatform()
}
